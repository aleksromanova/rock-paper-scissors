package rps.service;

import rps.exception.GameNotFoundException;
import rps.exception.StorageException;
import rps.model.Option;
import rps.model.GameState;
import rps.repository.GamesRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import rps.utils.RpsUtils;

import java.util.UUID;

/**
 * Logic for all manipulations on RPS game state
 */
@Service
public class GameService {
    private GamesRepository repository;

    @Autowired
    public GameService(GamesRepository repository) {
        this.repository = repository;
    }

    /**
     * Creates new game and saves it to the storage
     *
     * @return gameId
     * @throws StorageException if game couldn't be saved
     */
    public String startGame() throws StorageException {
        var uuid = UUID.randomUUID().toString();
        repository.saveGame(uuid, new GameState());
        return uuid;
    }

    /**
     * Generate computer turn for the game
     *
     * @param gameId id of current game
     * @return generated computer turn
     * @throws GameNotFoundException if game doesn't exist
     * @throws StorageException      if game couldn't be received from storage
     */
    public Option getComputerTurn(String gameId) throws GameNotFoundException, StorageException {
        var gameState = repository.getGame(gameId);
        if (gameState == null) {
            throw new GameNotFoundException();
        }
        return RpsUtils.generateComputerTurn(gameState.getGameHistory());
    }

    /**
     * Calculate result of game round
     *
     * @param gameId       id of the game
     * @param playerTurn   option chosen by player
     * @param computerTurn option generated by computer
     * @return result of the game as a text
     * @throws GameNotFoundException if game doesn't exist
     * @throws StorageException      if game couldn't be received or saved
     */
    public String playGameRound(String gameId, Option playerTurn, Option computerTurn) throws GameNotFoundException, StorageException {
        var gameState = findGameState(gameId);
        var roundResult = gameState.playRound(playerTurn, computerTurn);
        repository.saveGame(gameId, gameState);
        return roundResult.toString().toLowerCase();
    }

    /**
     * Get game state from storage
     *
     * @param gameId id of the game
     * @return game state
     * @throws GameNotFoundException if game doesn't exist
     * @throws StorageException      if game couldn't be received from storage
     */
    public GameState getGameState(String gameId) throws GameNotFoundException, StorageException {
        return findGameState(gameId);
    }

    /**
     * Delete game from storage
     *
     * @param gameId id of the game
     * @throws GameNotFoundException if game doesn't exist
     * @throws StorageException      if game couldn't be received from storage
     */
    public void deleteGame(String gameId) throws GameNotFoundException, StorageException {
        if (!repository.deleteGame(gameId)) {
            throw new GameNotFoundException();
        }
    }

    private GameState findGameState(String gameId) throws GameNotFoundException, StorageException {
        var gameState = repository.getGame(gameId);
        if (gameState == null) {
            throw new GameNotFoundException();
        }
        return gameState;
    }
}
